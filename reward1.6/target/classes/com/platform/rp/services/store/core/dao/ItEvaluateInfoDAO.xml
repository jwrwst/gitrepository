<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platform.rp.services.store.core.dao.ItEvaluateInfoDAO">

    <resultMap type="com.platform.rp.services.store.external.vo.StoreEvaluateStatisticVo" id="storeEvaluateStatisticVoMap">
        <result column="perdaycount" property="perDayCount" />
		<result column="perdayscore" property="perDayScore" />
		<result column="evaluatetime" property="evaluateTime" />
		<result column="busdate" property="busDate" />
	</resultMap>
	
    <resultMap type="com.platform.rp.services.store.external.vo.StorePeriodEvaluateScoreVo" id="storePeriodEvaluateVoMap">
        <result column="onecount" property="oneScoreCount" />
		<result column="twocount" property="twoScoreCount" />
		<result column="threecount" property="threeScoreCount" />
		<result column="fourcount" property="fourScoreCount" />
		<result column="fivecount" property="fiveScoreCount" />
	</resultMap>
	
    <resultMap type="com.platform.rp.services.employee.external.vo.EmployeeRankVo" id="employeeRankVoMap">
		<result column="rankdata" property="rankData" />
		<result column="empnickname" property="empNickname" />
		<result column="createtime" property="createTime" />
		<result column="empname" property="empName" />
		<result column="evaluate" property="evaluate" />
	</resultMap>
	
    <resultMap type="com.platform.rp.services.employee.external.vo.EmployeeRankDetailVo" id="employeeRankDetailVoMap">
        <result column="dayscore" property="dayData" />
		<result column="weekscore" property="weekData" />
		<result column="monthscore" property="monthData" />
		<result column="empnickname" property="empNickname" />
		<result column="jobnumber" property="jobNumber" />
		<result column="updatetime" property="updateTime" />
	</resultMap>

    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="com.platform.rp.services.store.core.dao.entity.ItEvaluateInfoEntity">
		insert into it_evaluate_info(customer_id,emp_id,store_id,service_score,satisfaction_score,biz_score,evaluate,evaluate_type,busdate)
		values(#{customerId},#{empId},#{storeId},#{serviceScore},#{satisfactionScore},#{bizScore},#{evaluate},#{evaluateType},#{busdate})
	</insert>
	
    <select id="getEvaluateStatisticByStoreID" resultMap="storeEvaluateStatisticVoMap" parameterType="map">
        select createdtime as evaluatetime, busdate as busdate, avg(service_score) as perdayscore, count(1) as perdaycount 
        from it_evaluate_info
        <where>
            store_id = #{storeId} 
            <if test = "busDateStart != null and busDateStart != 0 and busDateEnd != null and busDateEnd != 0 "> and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}</if>
        </where>
         group by busdate
	</select>
	
    <select id="getPeriodEvaluateScoreByStoreID" resultMap="storePeriodEvaluateVoMap" parameterType="map">
        select (select count(1) from it_evaluate_info where store_id = #{storeId} and service_score = 1 and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}) as onecount, 
               (select count(1) from it_evaluate_info where store_id = #{storeId} and service_score = 2 and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}) as twocount,
               (select count(1) from it_evaluate_info where store_id = #{storeId} and service_score = 3 and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}) as threecount,
               (select count(1) from it_evaluate_info where store_id = #{storeId} and service_score = 4 and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}) as fourcount,
               (select count(1) from it_evaluate_info where store_id = #{storeId} and service_score = 5 and busdate &gt;= #{busDateStart} and busdate &lt;= #{busDateEnd}) as fivecount
	</select>
	
    <select id="count" resultType="int" parameterType="map">
		select count(1) from it_evaluate_info a
		<where> 
        	<if test = "empId != null"> a.emp_id = #{empId} </if>
            <include refid="filter_where" />
        </where>
	</select>
	
    <sql id="filter_where">
       <!--  <if test = "storeId != null">and  a.store_id = #{storeId} </if> -->
        
           and a.store_Id in 
              <foreach collection="storeId" index="index" item="tag" open="("
			    separator="," close=")">
			   	#{tag}
			  </foreach>
        <if test = "filter == 'day'"> and a.createdtime &gt;= #{startDay} and a.createdtime &lt;= #{endDay} </if>
        <if test = "filter == 'yesterday'"> and a.createdtime &gt;= #{startYesterday} and a.createdtime &lt;= #{endYesterday}</if>
        <if test = "filter == 'week'"> and a.createdtime &gt;= #{startWeek} and a.createdtime &lt;= #{endWeek}</if>
        <if test = "filter == 'lastweek'"> and a.createdtime &gt;= #{startLastWeek} and a.createdtime &lt;= #{endLastWeek}</if>
        <if test = "filter == 'month'"> and a.createdtime &gt;= #{startMonth} and a.createdtime &lt;= #{endMonth}</if>
        <if test = "filter == 'lastmonth'"> and a.createdtime &gt;= #{startLastMonth} and a.createdtime &lt;= #{endLastMonth}</if>
        <if test = "filter == 'custom'"> and a.busdate &gt;= #{startTime} and a.busdate &lt;= #{endTime}</if>
    </sql>
	
    <sql id="page">
		<if test="start > -1">
			<if test="pageSize > 0">
				limit #{start}, #{pageSize}
			</if>
			<if test="pageSize == 0 or pageSize == '' or pageSize &lt; 0">
				limit #{start}
			</if>
		</if>
	</sql>
	
    <select id="getPage" resultMap="employeeRankVoMap" parameterType="map">
		select a.createdtime as createtime, a.service_score as rankdata, a.evaluate as evaluate, b.nickname as empnickname, b.name as empname 
        from it_evaluate_info a, bs_employee_info b
        <where>
        	<if test = "empId != null">  a.emp_id = #{empId} and a.emp_id = b.emp_id</if>
            <include refid="filter_where" />
        </where>
        order by a.createdtime desc 
		<include refid="page" />
	</select>
	
    <select id="getEmployeeEvaluateRankDetail" resultMap="employeeRankDetailVoMap">
		SELECT avg(if(a.busdate = #{dayStart}, a.service_score, null)) as dayscore, 
			   avg(if(a.busdate >= #{weekStart}, a.service_score, null)) as weekscore, 
			   avg(if(a.busdate >= #{monthStart}, a.service_score, null)) as monthscore, 
			   b.nickname as empnickname, b.job_number as jobnumber
		FROM it_evaluate_info a, bs_employee_info b
		where 
        	<if test = "empId != null">  a.emp_id = #{empId} and a.emp_id = b.emp_id</if>
       	 	<!-- <if test = "storeId != null">and  a.store_id = #{storeId} </if> -->
       	 	 
           and a.store_Id in 
              <foreach collection="storeId" index="index" item="tag" open="("
			    separator="," close=")">
			   	#{tag}
			  </foreach>
	</select>
	
</mapper>